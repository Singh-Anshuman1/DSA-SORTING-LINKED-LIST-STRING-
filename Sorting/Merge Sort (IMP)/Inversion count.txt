// Find number of elements in array such that arr[i]>arr[j] where (i<j).

class Solution{
  public:
    long long cnc=0;

    void merge(long long *arr,long long s,long long e)
{
    long long mid=s+(e-s)/2;
    long long len1=mid-s+1;
    long long len2=e-mid;
    long long *arr1=new long long[len1];
    long long *arr2=new long long[len2];
    long long k=s;
    // copying first half into array 1 and second half into array 2
    for(long long i=0;i<len1;i++)
    {
        arr1[i]=arr[k++];
    }
    k=mid+1;
    for(long long i=0;i<len2;i++)
    {
        arr2[i]=arr[k++];
    }
    // merging the values into original array based on sorting
    long long index1=0;
    long long index2=0;
    long long main_arrIndex=s;
    while(index1<len1&&index2<len2)
    {
        if(arr1[index1]<=arr2[index2])
        {
            arr[main_arrIndex++]=arr1[index1++];
        }
        else
        {
        arr[main_arrIndex++]=arr2[index2++];
        cnc+=len1-index1;
        }
    }
    //copying remaining values
    while(index1<len1)
    {
     arr[main_arrIndex++]=arr1[index1++];
    }
    while(index2<len2)
    {
    arr[main_arrIndex++]=arr2[index2++];   
    }
    
    delete []arr1;
    delete []arr2;
    
}
void merge_sort(long long *arr,long long s,long long e)
{
    if(s==e) // if single element in array
    return ;
    long long mid=s+(e-s)/2;
    //dividing the array until single element is present
    merge_sort(arr,s,mid);
    merge_sort(arr,mid+1,e);
     
    // combining the array 
    merge(arr,s,e);
}
    long long int inversionCount(long long arr[], long long N)
    {
        merge_sort(arr,0,N-1);
        return cnc;
    }

};