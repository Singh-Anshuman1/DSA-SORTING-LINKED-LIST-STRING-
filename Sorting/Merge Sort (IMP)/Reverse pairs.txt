//Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1


class Solution {
public:
int cnc=0;
void count(vector<int>& arr,int start,int mid,int high)
{
    int right=mid+1;
    for(int i=start;i<=mid;i++)
    {
        while(right <= high && arr[i] > 2*(long long)arr[right])
        right++;
        cnc+=right-(mid+1);
    }

}
    void merge(vector<int>& arr,int s,int e)
{
    int mid=s+(e-s)/2;
    int len1=mid-s+1;
    int len2=e-mid;
    int *arr1=new int[len1];
    int *arr2=new int[len2];
    int k=s;
    // copying first half into array 1 and second half into array 2
    for(int i=0;i<len1;i++)
    {
        arr1[i]=arr[k++];
    }
    k=mid+1;
    for(int i=0;i<len2;i++)
    {
        arr2[i]=arr[k++];
    }
    // merging the values into original array based on sorting
    int index1=0;
    int index2=0;
    int main_arrIndex=s;
    while(index1<len1&&index2<len2)
    {
        if(arr1[index1]<arr2[index2])
        {
            arr[main_arrIndex++]=arr1[index1++];
        }
        else
        arr[main_arrIndex++]=arr2[index2++];
    }
    //copying remaining values
    while(index1<len1)
    {
     arr[main_arrIndex++]=arr1[index1++];
    }
    while(index2<len2)
    {
    arr[main_arrIndex++]=arr2[index2++];   
    }
    
    delete []arr1;
    delete []arr2;
    
}
void merge_sort(vector<int>& arr,int s,int e)
{
    if(s==e) // if single element in array
    return ;
    int mid=s+(e-s)/2;
    //dividing the array until single element is present
    merge_sort(arr,s,mid);
    merge_sort(arr,mid+1,e);
     count(arr,s,mid,e);
    // combining the array 
    merge(arr,s,e);
}
    int reversePairs(vector<int>& nums) {
     merge_sort(nums,0,nums.size()-1);
     return cnc;
        
    }
};


