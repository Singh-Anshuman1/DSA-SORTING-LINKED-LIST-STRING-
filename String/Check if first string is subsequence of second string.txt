In an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.

Return true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.

Note: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.

 

Example 1:

Input: str1 = "abc", str2 = "ad"
Output: true
Explanation: Select index 2 in str1.
Increment str1[2] to become 'd'. 
Hence, str1 becomes "abd" and str2 is now a subsequence. Therefore, true is returned.






class Solution {
public:
    bool canMakeSubsequence(string str1, string str2) {
        int len1=str1.length();
        int len2=str2.length();
        int i=0;
        int j=0;
        int count=0;
        while(i<len1&&j<len2)
        {
            char ch1=str1[i];
            char ch2=(char)('a'+((ch1-'a'+1)%26));
            if(ch1==str2[j]||ch2==str2[j])
            {
                j++;
                count++;
            }
                i++;
        }
        if(count==len2)
            return true;
        else
            return false;
        
    }
};