// Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

class Solution {
public:
    bool checkEqual(int count1[26], int count2[26]) {
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i])
                return false;
        }
        return true;
    }

    bool checkInclusion(string s1, string s2) {
        int count[26] = {0}; // character count array of s1
        for (char c : s1) {
            int index = c - 'a';
            count[index]++;
        }
        //for first window
        int i = 0;
        int windowSize = s1.length();
        int count2[26] = {0};
        while (i < windowSize && i < s2.length()) {
            int index = s2[i] - 'a';
            count2[index]++;
            i++;
        }

        if (checkEqual(count, count2))
            return true;

        // for remaining window
        while (i < s2.length()) {
            char newChar = s2[i];
            int newIndex = newChar - 'a';
            count2[newIndex]++;

            char oldChar = s2[i - windowSize]; // make the count of the discarded element of the previous window 0
            int oldIndex = oldChar - 'a';
            count2[oldIndex]--;
            i++;

            if (checkEqual(count, count2))
                return true;
        }
        return false;
    }
};
